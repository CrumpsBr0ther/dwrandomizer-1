/** This file is generated by build_expansion.py */
#ifndef _EXPANSION_H_
#define _EXPANSION_H_

#include "dwr_types.h"

void bank_3_patch(dw_rom *rom);
void fill_expansion(dw_rom *rom);

/* Defines for jump labels in bank 3 patch code
 * JMP -> hook with jmp instruction
 * JSR -> hook with jsr instruction
 * DHOOK -> hook dialogue (replace dialogue index with nop)
 */
#define JMP_BLOCKED_IN_FRONT(addr) vpatch(rom, addr, 3, 0x4C, 0xD7, 0xC2)
#define JSR_BLOCKED_IN_FRONT(addr) vpatch(rom, addr, 3, 0x20, 0xD7, 0xC2)
#define DHOOK_BLOCKED_IN_FRONT(addr) vpatch(rom, addr, 4, 0x20, 0xD7, 0xC2, 0xea)
#define JMP_COUNT_ENCOUNTER(addr) vpatch(rom, addr, 3, 0x4C, 0xB, 0xC3)
#define JSR_COUNT_ENCOUNTER(addr) vpatch(rom, addr, 3, 0x20, 0xB, 0xC3)
#define DHOOK_COUNT_ENCOUNTER(addr) vpatch(rom, addr, 4, 0x20, 0xB, 0xC3, 0xea)
#define JMP_COUNT_FRAME(addr) vpatch(rom, addr, 3, 0x4C, 0x9A, 0xC3)
#define JSR_COUNT_FRAME(addr) vpatch(rom, addr, 3, 0x20, 0x9A, 0xC3)
#define DHOOK_COUNT_FRAME(addr) vpatch(rom, addr, 4, 0x20, 0x9A, 0xC3, 0xea)
#define JMP_COUNT_SPELL_USE(addr) vpatch(rom, addr, 3, 0x4C, 0x1E, 0xC3)
#define JSR_COUNT_SPELL_USE(addr) vpatch(rom, addr, 3, 0x20, 0x1E, 0xC3)
#define DHOOK_COUNT_SPELL_USE(addr) vpatch(rom, addr, 4, 0x20, 0x1E, 0xC3, 0xea)
#define JMP_COUNT_WIN(addr) vpatch(rom, addr, 3, 0x4C, 0x16, 0xC3)
#define JSR_COUNT_WIN(addr) vpatch(rom, addr, 3, 0x20, 0x16, 0xC3)
#define DHOOK_COUNT_WIN(addr) vpatch(rom, addr, 4, 0x20, 0x16, 0xC3, 0xea)
#define JMP_CURSED_PRINCESS_CHECK(addr) vpatch(rom, addr, 3, 0x4C, 0x4D, 0xC3)
#define JSR_CURSED_PRINCESS_CHECK(addr) vpatch(rom, addr, 3, 0x20, 0x4D, 0xC3)
#define DHOOK_CURSED_PRINCESS_CHECK(addr) vpatch(rom, addr, 4, 0x20, 0x4D, 0xC3, 0xea)
#define JMP_DISPLAY_DEATHS(addr) vpatch(rom, addr, 3, 0x4C, 0x79, 0xC3)
#define JSR_DISPLAY_DEATHS(addr) vpatch(rom, addr, 3, 0x20, 0x79, 0xC3)
#define DHOOK_DISPLAY_DEATHS(addr) vpatch(rom, addr, 4, 0x20, 0x79, 0xC3, 0xea)
#define JMP_EXEC_EXPANSION_SUB(addr) vpatch(rom, addr, 3, 0x4C, 0xE9, 0xC2)
#define JSR_EXEC_EXPANSION_SUB(addr) vpatch(rom, addr, 3, 0x20, 0xE9, 0xC2)
#define DHOOK_EXEC_EXPANSION_SUB(addr) vpatch(rom, addr, 4, 0x20, 0xE9, 0xC2, 0xea)
#define JMP_INC_ATTACK_CTR(addr) vpatch(rom, addr, 3, 0x4C, 0xA0, 0xC2)
#define JSR_INC_ATTACK_CTR(addr) vpatch(rom, addr, 3, 0x20, 0xA0, 0xC2)
#define DHOOK_INC_ATTACK_CTR(addr) vpatch(rom, addr, 4, 0x20, 0xA0, 0xC2, 0xea)
#define JMP_INC_BONK_CTR(addr) vpatch(rom, addr, 3, 0x4C, 0xC5, 0xC2)
#define JSR_INC_BONK_CTR(addr) vpatch(rom, addr, 3, 0x20, 0xC5, 0xC2)
#define DHOOK_INC_BONK_CTR(addr) vpatch(rom, addr, 4, 0x20, 0xC5, 0xC2, 0xea)
#define JMP_INC_CRIT_CTR(addr) vpatch(rom, addr, 3, 0x4C, 0xAA, 0xC2)
#define JSR_INC_CRIT_CTR(addr) vpatch(rom, addr, 3, 0x20, 0xAA, 0xC2)
#define DHOOK_INC_CRIT_CTR(addr) vpatch(rom, addr, 4, 0x20, 0xAA, 0xC2, 0xea)
#define JMP_INC_DEATH_CTR(addr) vpatch(rom, addr, 3, 0x4C, 0xCE, 0xC2)
#define JSR_INC_DEATH_CTR(addr) vpatch(rom, addr, 3, 0x20, 0xCE, 0xC2)
#define DHOOK_INC_DEATH_CTR(addr) vpatch(rom, addr, 4, 0x20, 0xCE, 0xC2, 0xea)
#define JMP_INC_DODGE_CTR(addr) vpatch(rom, addr, 3, 0x4C, 0xBC, 0xC2)
#define JSR_INC_DODGE_CTR(addr) vpatch(rom, addr, 3, 0x20, 0xBC, 0xC2)
#define DHOOK_INC_DODGE_CTR(addr) vpatch(rom, addr, 4, 0x20, 0xBC, 0xC2, 0xea)
#define JMP_INC_ENEMY_DEATH_CTR(addr) vpatch(rom, addr, 3, 0x4C, 0x4, 0xC3)
#define JSR_INC_ENEMY_DEATH_CTR(addr) vpatch(rom, addr, 3, 0x20, 0x4, 0xC3)
#define DHOOK_INC_ENEMY_DEATH_CTR(addr) vpatch(rom, addr, 4, 0x20, 0x4, 0xC3, 0xea)
#define JMP_INC_MISS_CTR(addr) vpatch(rom, addr, 3, 0x4C, 0xB3, 0xC2)
#define JSR_INC_MISS_CTR(addr) vpatch(rom, addr, 3, 0x20, 0xB3, 0xC2)
#define DHOOK_INC_MISS_CTR(addr) vpatch(rom, addr, 4, 0x20, 0xB3, 0xC2, 0xea)
#define JMP_INIT_SAVE_RAM(addr) vpatch(rom, addr, 3, 0x4C, 0x6F, 0xC3)
#define JSR_INIT_SAVE_RAM(addr) vpatch(rom, addr, 3, 0x20, 0x6F, 0xC3)
#define DHOOK_INIT_SAVE_RAM(addr) vpatch(rom, addr, 4, 0x20, 0x6F, 0xC3, 0xea)
#define JMP_PLAYER_AMBUSHED(addr) vpatch(rom, addr, 3, 0x4C, 0xE1, 0xC2)
#define JSR_PLAYER_AMBUSHED(addr) vpatch(rom, addr, 3, 0x20, 0xE1, 0xC2)
#define DHOOK_PLAYER_AMBUSHED(addr) vpatch(rom, addr, 4, 0x20, 0xE1, 0xC2, 0xea)
#define JMP_SCARED_SLIMES(addr) vpatch(rom, addr, 3, 0x4C, 0x62, 0xC3)
#define JSR_SCARED_SLIMES(addr) vpatch(rom, addr, 3, 0x20, 0x62, 0xC3)
#define DHOOK_SCARED_SLIMES(addr) vpatch(rom, addr, 4, 0x20, 0x62, 0xC3, 0xea)
#define JMP_SNAPSHOT_TIMER(addr) vpatch(rom, addr, 3, 0x4C, 0xBB, 0xC3)
#define JSR_SNAPSHOT_TIMER(addr) vpatch(rom, addr, 3, 0x20, 0xBB, 0xC3)
#define DHOOK_SNAPSHOT_TIMER(addr) vpatch(rom, addr, 4, 0x20, 0xBB, 0xC3, 0xea)
#define JMP_SORT_INVENTORY(addr) vpatch(rom, addr, 3, 0x4C, 0x26, 0xC3)
#define JSR_SORT_INVENTORY(addr) vpatch(rom, addr, 3, 0x20, 0x26, 0xC3)
#define DHOOK_SORT_INVENTORY(addr) vpatch(rom, addr, 4, 0x20, 0x26, 0xC3, 0xea)
#define JMP_START_DWR_CREDITS(addr) vpatch(rom, addr, 3, 0x4C, 0x9C, 0xC2)
#define JSR_START_DWR_CREDITS(addr) vpatch(rom, addr, 3, 0x20, 0x9C, 0xC2)
#define DHOOK_START_DWR_CREDITS(addr) vpatch(rom, addr, 4, 0x20, 0x9C, 0xC2, 0xea)
#define JMP_STORE_PRINCESS_ITEM(addr) vpatch(rom, addr, 3, 0x4C, 0x48, 0xC3)
#define JSR_STORE_PRINCESS_ITEM(addr) vpatch(rom, addr, 3, 0x20, 0x48, 0xC3)
#define DHOOK_STORE_PRINCESS_ITEM(addr) vpatch(rom, addr, 4, 0x20, 0x48, 0xC3, 0xea)
#define JMP_THREES_COMPANY_CHECK(addr) vpatch(rom, addr, 3, 0x4C, 0x36, 0xC3)
#define JSR_THREES_COMPANY_CHECK(addr) vpatch(rom, addr, 3, 0x20, 0x36, 0xC3)
#define DHOOK_THREES_COMPANY_CHECK(addr) vpatch(rom, addr, 4, 0x20, 0x36, 0xC3, 0xea)
#define JMP_TORCH_IN_BATTLE(addr) vpatch(rom, addr, 3, 0x4C, 0x32, 0xC3)
#define JSR_TORCH_IN_BATTLE(addr) vpatch(rom, addr, 3, 0x20, 0x32, 0xC3)
#define DHOOK_TORCH_IN_BATTLE(addr) vpatch(rom, addr, 4, 0x20, 0x32, 0xC3, 0xea)

#endif
