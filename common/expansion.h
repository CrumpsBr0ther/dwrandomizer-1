/** This file is generated by build_expansion.py */
#ifndef _EXPANSION_H_
#define _EXPANSION_H_

#include "dwr_types.h"

void bank_3_patch(dw_rom *rom);
void fill_expansion(dw_rom *rom);

/* Defines for jump labels in bank 3 patch code */
#define JMP_COUNT_ENCOUNTER(addr) vpatch(rom, addr, 3, 0x4C, 0xD6, 0xC2)
#define JSR_COUNT_ENCOUNTER(addr) vpatch(rom, addr, 3, 0x20, 0xD6, 0xC2)
#define JMP_COUNT_SPELL_USE(addr) vpatch(rom, addr, 3, 0x4C, 0xEF, 0xC2)
#define JSR_COUNT_SPELL_USE(addr) vpatch(rom, addr, 3, 0x20, 0xEF, 0xC2)
#define JMP_COUNT_WIN(addr) vpatch(rom, addr, 3, 0x4C, 0xE4, 0xC2)
#define JSR_COUNT_WIN(addr) vpatch(rom, addr, 3, 0x20, 0xE4, 0xC2)
#define JMP_CURSED_PRINCESS_CHECK(addr) vpatch(rom, addr, 3, 0x4C, 0x89, 0xC3)
#define JSR_CURSED_PRINCESS_CHECK(addr) vpatch(rom, addr, 3, 0x20, 0x89, 0xC3)
#define JMP_DISPLAY_DEATHS(addr) vpatch(rom, addr, 3, 0x4C, 0xA, 0xC3)
#define JSR_DISPLAY_DEATHS(addr) vpatch(rom, addr, 3, 0x20, 0xA, 0xC3)
#define JMP_INC_ATTACK_CTR(addr) vpatch(rom, addr, 3, 0x4C, 0x90, 0xC2)
#define JSR_INC_ATTACK_CTR(addr) vpatch(rom, addr, 3, 0x20, 0x90, 0xC2)
#define JMP_INC_BONK_CTR(addr) vpatch(rom, addr, 3, 0x4C, 0xAC, 0xC2)
#define JSR_INC_BONK_CTR(addr) vpatch(rom, addr, 3, 0x20, 0xAC, 0xC2)
#define JMP_INC_COUNTER(addr) vpatch(rom, addr, 3, 0x4C, 0xC8, 0xC2)
#define JSR_INC_COUNTER(addr) vpatch(rom, addr, 3, 0x20, 0xC8, 0xC2)
#define JMP_INC_CRIT_CTR(addr) vpatch(rom, addr, 3, 0x4C, 0x97, 0xC2)
#define JSR_INC_CRIT_CTR(addr) vpatch(rom, addr, 3, 0x20, 0x97, 0xC2)
#define JMP_INC_DEATH_CTR(addr) vpatch(rom, addr, 3, 0x4C, 0xC3, 0xC2)
#define JSR_INC_DEATH_CTR(addr) vpatch(rom, addr, 3, 0x20, 0xC3, 0xC2)
#define JMP_INC_DODGE_CTR(addr) vpatch(rom, addr, 3, 0x4C, 0xA5, 0xC2)
#define JSR_INC_DODGE_CTR(addr) vpatch(rom, addr, 3, 0x20, 0xA5, 0xC2)
#define JMP_INC_ENEMY_DEATH_CTR(addr) vpatch(rom, addr, 3, 0x4C, 0xB3, 0xC2)
#define JSR_INC_ENEMY_DEATH_CTR(addr) vpatch(rom, addr, 3, 0x20, 0xB3, 0xC2)
#define JMP_INC_MISS_CTR(addr) vpatch(rom, addr, 3, 0x4C, 0x9E, 0xC2)
#define JSR_INC_MISS_CTR(addr) vpatch(rom, addr, 3, 0x20, 0x9E, 0xC2)
#define JMP_SCARED_SLIMES(addr) vpatch(rom, addr, 3, 0x4C, 0x9E, 0xC3)
#define JSR_SCARED_SLIMES(addr) vpatch(rom, addr, 3, 0x20, 0x9E, 0xC3)
#define JMP_SORT_INVENTORY(addr) vpatch(rom, addr, 3, 0x4C, 0xFA, 0xC2)
#define JSR_SORT_INVENTORY(addr) vpatch(rom, addr, 3, 0x20, 0xFA, 0xC2)
#define JMP_START_DWR_CREDITS(addr) vpatch(rom, addr, 3, 0x4C, 0x88, 0xC2)
#define JSR_START_DWR_CREDITS(addr) vpatch(rom, addr, 3, 0x20, 0x88, 0xC2)
#define JMP_STORE_PRINCESS_ITEM(addr) vpatch(rom, addr, 3, 0x4C, 0x84, 0xC3)
#define JSR_STORE_PRINCESS_ITEM(addr) vpatch(rom, addr, 3, 0x20, 0x84, 0xC3)
#define JMP_THREES_COMPANY_CHECK(addr) vpatch(rom, addr, 3, 0x4C, 0x72, 0xC3)
#define JSR_THREES_COMPANY_CHECK(addr) vpatch(rom, addr, 3, 0x20, 0x72, 0xC3)
#define JMP_TORCH_IN_BATTLE(addr) vpatch(rom, addr, 3, 0x4C, 0x2B, 0xC3)
#define JSR_TORCH_IN_BATTLE(addr) vpatch(rom, addr, 3, 0x20, 0x2B, 0xC3)

#endif
